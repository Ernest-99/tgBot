package org.example.javabot.service;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.time.LocalDate;

@Service
public class ExcelParserService {

    public String getScheduleByGroupForWeek(File file, String groupName) {
        StringBuilder result = new StringBuilder();

        try (FileInputStream fis = new FileInputStream(file);
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {

            XSSFSheet sheet = workbook.getSheet(groupName);
            if (sheet == null) {
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã: " + groupName;
            }

            Row headerRow = sheet.getRow(1); // —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π
            if (headerRow == null) return "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!";

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –≤ –∫–∞—Ä—Ç—É: –∏–º—è –¥–Ω—è -> –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
            Map<String, Integer> dayColumnMap = new LinkedHashMap<>();
            for (int i = 1; i < headerRow.getLastCellNum(); i++) {
                Cell cell = headerRow.getCell(i);
                if (cell != null) {
                    String dayName = getCellValueAsString(cell);
                    if (!dayName.isEmpty()) {
                        dayColumnMap.put(dayName, i);
                    }
                }
            }

            result.append("\n");

            for (Map.Entry<String, Integer> entry : dayColumnMap.entrySet()) {
                String day = entry.getKey();
                int colIndex = entry.getValue();

                result.append("üìå ").append(day).append(":\n");

                for (int i = 2; i <= sheet.getLastRowNum(); i++) {
                    Row row = sheet.getRow(i);
                    if (row == null) continue;

                    Cell timeCell = row.getCell(0);
                    Cell lessonCell = row.getCell(colIndex);

                    String time = getCellValueAsString(timeCell);
                    String lesson = getCellValueAsString(lessonCell);

                    if (!time.isEmpty() && !lesson.isEmpty()) {
                        result.append("‚è∞ ").append(time).append(" ‚Äî ").append(lesson).append("\n");
                    }
                }

                result.append("\n"); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏
            }

        } catch (IOException e) {
            e.printStackTrace();
            return "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.";
        }

        return result.toString();
    }

    public String getScheduleByGroupToday(File file, String groupName) {
        StringBuilder result = new StringBuilder();
        try (FileInputStream fis = new FileInputStream(file);
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {

            XSSFSheet sheet = workbook.getSheet(groupName);
            if (sheet == null) {
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã: " + groupName; // "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã: " + groupName
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É ‚Äî —ç—Ç–æ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            Row headerRow = sheet.getRow(1);
            if (headerRow == null) return "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!";

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            DayOfWeek today = LocalDate.now().getDayOfWeek();
            Map<String, Integer> dayColumnMap = Map.of(
                    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1,
                    "–í—Ç–æ—Ä–Ω–∏–∫", 2,
                    "–°—Ä–µ–¥–∞", 3,
                    "–ß–µ—Ç–≤–µ—Ä–≥", 4,
                    "–ü—è—Ç–Ω–∏—Ü–∞", 5
            );

            String todayName = getRussianDay(today);
            Integer colIndex = dayColumnMap.get(todayName);
            if (colIndex == null) return "üéâ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!";

            result.append("üìÖ –î–µ–Ω—å: == ").append(todayName).append(" ==\n\n");

            // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å 3 —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å–∞ 2)
            for (int i = 2; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                Cell timeCell = row.getCell(0);
                Cell lessonCell = row.getCell(colIndex);

                String time = getCellValueAsString(timeCell);
                String lesson = getCellValueAsString(lessonCell);

                if (!time.isEmpty() && !lesson.isEmpty()) {
                    result.append("‚è∞ ").append(time).append(" ‚Äî ").append(lesson).append("\n");
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
            return "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.";
        }

        return result.toString();
    }

    private String getRussianDay(DayOfWeek day) {
        return switch (day) {
            case MONDAY -> "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
            case TUESDAY -> "–í—Ç–æ—Ä–Ω–∏–∫";
            case WEDNESDAY -> "–°—Ä–µ–¥–∞";
            case THURSDAY -> "–ß–µ—Ç–≤–µ—Ä–≥";
            case FRIDAY -> "–ü—è—Ç–Ω–∏—Ü–∞";
            default -> "";
        };
    }


    private String getCellValueAsString(Cell cell) {
        if (cell == null) return "";
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue();
            case NUMERIC -> DateUtil.isCellDateFormatted(cell)
                    ? new SimpleDateFormat("HH:mm").format(cell.getDateCellValue())
                    : String.valueOf(cell.getNumericCellValue());
            case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
            default -> "";
        };
    }

    public List<String> getGroupNames(File excelFile) {
        List<String> groupNames = new ArrayList<>();

        try (FileInputStream fis = new FileInputStream(excelFile);
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {

            for (int i = 0; i < workbook.getNumberOfSheets(); i++) {
                groupNames.add(workbook.getSheetName(i));
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        return groupNames;
    }


}
