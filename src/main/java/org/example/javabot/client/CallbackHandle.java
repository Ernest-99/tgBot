package org.example.javabot.client;

import lombok.SneakyThrows;
import org.example.javabot.config.BotConfig;
import org.example.javabot.service.ExcelParserService;
import org.example.javabot.user.entity.UserEntity;
import org.example.javabot.user.repositories.UserRepository;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.File;
import java.util.List;

@Component
public class CallbackHandle {
    private  final TelegramClient telegramClient;
    private final BotConfig botConfig;
    private final MenuService menuService;
    private final UserRepository userRepository;
    private ExcelParserService excelParserService;

    public CallbackHandle(BotConfig botConfig, MenuService menuService, ExcelParserService excelParserService, UserRepository userRepository) {
        this.botConfig = botConfig;
        this.telegramClient = new OkHttpTelegramClient(botConfig.getBotToken());
        this.menuService = menuService;
        this.excelParserService = excelParserService;
        this.userRepository = userRepository;
    }

    public void handleCallback(CallbackQuery callbackQuery) {
        var data = callbackQuery.getData();
        var chatId = callbackQuery.getFrom().getId();
        var messageId = callbackQuery.getMessage().getMessageId();
        var callbackQueryId = callbackQuery.getId();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        if (data.startsWith("course_")) {
            handleCourseSelection(callbackQueryId, data, chatId);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        else if (data.startsWith("GROUP_")) {
            handleGroupSelection(callbackQueryId, data, chatId);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        else if (data.startsWith("action_")) {
            //handleAction(callbackQuery, data);
        }
        else {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
        }
    }


    private void handleCourseSelection(String callbackQueryId, String data, Long chatId){
        try {
            // 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏)
            answerCallbackQuery(callbackQueryId);

            // 2. –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É
            String fileName = switch (data) {
                case "course_first" -> "1course.xlsx";
                case "course_second" -> "2course.xlsx";
                case "course_third" -> "3course.xlsx";
                default -> null;
            };

            if (fileName != null) {
                sendGroupSelectionMenu(chatId, new File("courses/" + fileName));
            } else {
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        }catch (Exception e){
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            answerCallbackQuery(callbackQueryId);
            e.printStackTrace();
        }
    }
    private void handleGroupSelection(String callbackQueryId, String data, Long chatId) {
        try {
            answerCallbackQuery(callbackQueryId);

            String groupName = data.substring("GROUP_".length());

            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            int scheduleType = userRepository.findByChatId(chatId)
                    .map(UserEntity::getScheduleType)
                    .orElse(0);
            // –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∫—É—Ä—Å–∞—Ö
            boolean found = false;

            for (Course course : Course.values()) {
                try {
                    String schedule;
                    File courseFile = course.getFile();

                    if (scheduleType == 1) {
                        schedule = excelParserService.getScheduleByGroupForWeek(courseFile, groupName);
                    } else {
                        schedule = excelParserService.getScheduleByGroupToday(courseFile, groupName);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫
                    if (schedule != null && !schedule.trim().isEmpty() &&
                            !schedule.contains("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω") &&
                            !schedule.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {

                        String message = "üìò " + course.getDisplayName() +
                                "\nüë• –ì—Ä—É–ø–ø–∞ " + groupName +
                                "\n" + schedule;
                        sendMessage(chatId, message);
                        found = true;
                        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
                    }
                } catch (Exception e) {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫—É—Ä—Å–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    continue;
                }
            }
            // –ï—Å–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫—É—Ä—Å–µ –Ω–µ –Ω–∞—à–ª–∏
            if (!found) {
                sendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ \"" + groupName + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫—É—Ä—Å–µ\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã");
            }
        } catch (Exception e) {
            answerCallbackQuery(callbackQueryId);
            e.printStackTrace();
            sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback, —á—Ç–æ–±—ã —É–±–∞—Ä—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    private void answerCallbackQuery(String callbackQueryId) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery(callbackQueryId);
        try {
            telegramClient.execute(answer);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @SneakyThrows
    private void sendGroupSelectionMenu(Long chatId, File excelFile) {
        List<String> groups = excelParserService.getGroupNames(excelFile);
        InlineKeyboardMarkup markup = menuService.createGroupButtons(groups);

        SendMessage message = SendMessage.builder().text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:").chatId(chatId).build();
        message.setReplyMarkup(markup);

        try {
            telegramClient.execute(message); // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ execute(...) –µ—Å–ª–∏ —Ç—ã –≤ –∫–ª–∞—Å—Å–µ TelegramLongPollingBot
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @SneakyThrows
    public void sendMessage(Long chatId, String messageText) {
        SendMessage message = SendMessage.builder().text(messageText).chatId(chatId).build();
        telegramClient.execute(message);
    }
}
